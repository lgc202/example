apiVersion: v1
kind: Pod
metadata:
  name: pod-command
  namespace: dev
spec:
  containers:
    - name: nginx
      image: nginx:1.17.1
    - name: busybox
      image: busybox:1.30
      command:
        [
          "/bin/sh",
          "-c",
          "touch /tmp/hello.txt;while true;do /bin/echo $(date +%T) >> /tmp/hello.txt; sleep 3; done;",
        ]
# busybox并不是一个程序，而是类似于一个工具类的集合，kubernetes集群启动管理后，它会自动关闭。解决方法就是让其一直在运行，这就用到了command配置
# command，用于在pod中的容器初始化完毕之后运行一个命令。
# "/bin/sh","-c", 使用sh执行命令
# touch /tmp/hello.txt; 创建一个/tmp/hello.txt 文件
# while true;do /bin/echo $(date +%T) >> /tmp/hello.txt; sleep 3; done; 每隔3秒向文件中写入当前时间

# 创建Pod
# kubectl apply -f 003-pod-command.yaml

# 查看Pod状态
# 此时发现两个pod都正常运行了
# kubectl get pods pod-command -n dev

# 进入pod中的busybox容器，查看文件内容
# 补充一个命令: kubectl exec -it pod名称 -c 容器名称 -n 命名空间 -- sh
# 使用这个命令就可以进入某个容器的内部，然后进行相关操作了
# 比如，可以查看txt文件的内容
# kubectl exec -it pod-command -c busybox -n dev -- sh
# tail -f /tmp/hello.txt

# 清理环境
# kubectl delete -f 003-pod-command.yaml

# 特别说明：
#  通过上面发现command已经可以完成启动命令和传递参数的功能，为什么这里还要提供一个args选项，用于传递参数呢?这其实跟docker有点关系，kubernetes中的command、args两项其实是实现覆盖Dockerfile中ENTRYPOINT的功能。
#  1 如果command和args均没有写，那么用Dockerfile的配置。
#  2 如果command写了，但args没有写，那么Dockerfile默认的配置会被忽略，执行输入的command
#  3 如果command没写，但args写了，那么Dockerfile中配置的ENTRYPOINT的命令会被执行，使用当前args的参数
#  4 如果command和args都写了，那么Dockerfile的配置被忽略，执行command并追加上args参数